// <auto-generated />
using System;
using DiagramEditor.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiagramEditor.Database.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231105173508_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DiagramEditor.Database.Models.AdminNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdminNote");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.Diagram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Diagram");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowEdit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiagramId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId");

                    b.HasIndex("UserId");

                    b.ToTable("DiagramAccess");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiagramId")
                        .HasColumnType("int");

                    b.Property<float>("OriginX")
                        .HasColumnType("float");

                    b.Property<float>("OriginY")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId");

                    b.ToTable("DiagramElement");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramElementProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DiagramElementId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DiagramElementId");

                    b.ToTable("DiagramElementProperty");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramEnvironment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DiagramId")
                        .HasColumnType("int");

                    b.Property<string>("PublicName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId");

                    b.ToTable("DiagramEnvironment");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.AdminNote", b =>
                {
                    b.HasOne("DiagramEditor.Database.Models.User", "User")
                        .WithMany("AdminNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.Diagram", b =>
                {
                    b.HasOne("DiagramEditor.Database.Models.User", "Creator")
                        .WithMany("Diagrams")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramAccess", b =>
                {
                    b.HasOne("DiagramEditor.Database.Models.Diagram", "Diagram")
                        .WithMany("Accesses")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiagramEditor.Database.Models.User", "User")
                        .WithMany("Accesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramElement", b =>
                {
                    b.HasOne("DiagramEditor.Database.Models.Diagram", "Diagram")
                        .WithMany("Elements")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramElementProperty", b =>
                {
                    b.HasOne("DiagramEditor.Database.Models.DiagramElement", null)
                        .WithMany("Properties")
                        .HasForeignKey("DiagramElementId");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramEnvironment", b =>
                {
                    b.HasOne("DiagramEditor.Database.Models.Diagram", "Diagram")
                        .WithMany("Environments")
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.Diagram", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Elements");

                    b.Navigation("Environments");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.DiagramElement", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("DiagramEditor.Database.Models.User", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("AdminNotes");

                    b.Navigation("Diagrams");
                });
#pragma warning restore 612, 618
        }
    }
}
