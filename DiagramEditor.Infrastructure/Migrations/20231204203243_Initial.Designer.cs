// <auto-generated />
using System;
using DiagramEditor.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiagramEditor.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231204203243_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DiagramEditor.Domain.DiagramEnvironment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DiagramId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PublicName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PublicUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId");

                    b.ToTable("DiagramEnvironment");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Diagrams.Diagram", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Diagrams");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Diagrams.DiagramElement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DiagramId")
                        .HasColumnType("char(36)");

                    b.Property<float>("OriginX")
                        .HasColumnType("float");

                    b.Property<float>("OriginY")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId");

                    b.ToTable("DiagramElement");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Diagrams.DiagramElementProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("DiagramElementProperty");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiagramEditor.Domain.DiagramEnvironment", b =>
                {
                    b.HasOne("DiagramEditor.Domain.Diagrams.Diagram", "Diagram")
                        .WithMany()
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Diagrams.Diagram", b =>
                {
                    b.HasOne("DiagramEditor.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Diagrams.DiagramElement", b =>
                {
                    b.HasOne("DiagramEditor.Domain.Diagrams.Diagram", "Diagram")
                        .WithMany()
                        .HasForeignKey("DiagramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagram");
                });

            modelBuilder.Entity("DiagramEditor.Domain.Diagrams.DiagramElementProperty", b =>
                {
                    b.HasOne("DiagramEditor.Domain.Diagrams.DiagramElement", "Element")
                        .WithMany()
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });
#pragma warning restore 612, 618
        }
    }
}
